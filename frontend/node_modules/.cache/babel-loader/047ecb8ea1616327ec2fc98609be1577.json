{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Ambuj\\\\Desktop\\\\Coding\\\\web-projects\\\\tourela\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nexport function arrayMove(array, from, to) {\n  array = array.slice();\n  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n  return array;\n}\nexport function arrayRemove(array, index) {\n  array = array.slice();\n  array.splice(index, 1);\n  return array;\n}\nexport function getTranslateOffset(element) {\n  var style = window.getComputedStyle(element);\n  return Math.max(parseInt(style['margin-top'], 10), parseInt(style['margin-bottom'], 10)) + element.getBoundingClientRect().height;\n}\nexport function isTouchEvent(event) {\n  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\nexport function transformItem(element) {\n  var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var offsetX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (!element) return;\n\n  if (offsetY === null || offsetX === null) {\n    element.style.removeProperty('transform');\n    return;\n  }\n\n  element.style.transform = \"translate(\".concat(offsetX, \"px, \").concat(offsetY, \"px)\");\n}\nexport function isItemTransformed(element) {\n  return !!element.style.transform;\n}\nexport function setItemTransition(element, duration, timing) {\n  if (element) {\n    element.style['transition'] = \"transform \".concat(duration, \"ms\").concat(timing ? \" \".concat(timing) : '');\n  }\n} // returns the \"slot\" for the targetValue, aka where it should go\n// in an ordered \"array\", it starts with -1 index\n\nexport function binarySearch(array, targetValue) {\n  var min = 0;\n  var max = array.length - 1;\n  var guess;\n\n  while (min <= max) {\n    guess = Math.floor((max + min) / 2);\n\n    if (!array[guess + 1] || array[guess] <= targetValue && array[guess + 1] >= targetValue) {\n      return guess;\n    } else if (array[guess] < targetValue && array[guess + 1] < targetValue) {\n      min = guess + 1;\n    } else {\n      max = guess - 1;\n    }\n  }\n\n  return -1;\n} // adapted from https://github.com/alexreardon/raf-schd\n\nexport var schd = function schd(fn) {\n  var lastArgs = [];\n  var frameId = null;\n\n  var wrapperFn = function wrapperFn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    lastArgs = args;\n\n    if (frameId) {\n      return;\n    }\n\n    frameId = requestAnimationFrame(function () {\n      frameId = null;\n      fn.apply(void 0, _toConsumableArray(lastArgs));\n    });\n  };\n\n  wrapperFn.cancel = function () {\n    if (frameId) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n\n  return wrapperFn;\n};\nexport function checkIfInteractive(target, rootElement) {\n  var DISABLED_ELEMENTS = ['input', 'textarea', 'select', 'option', 'optgroup', 'video', 'audio', 'button', 'a'];\n  var DISABLED_ROLES = ['button', 'link', 'checkbox', 'tab'];\n\n  while (target !== rootElement) {\n    if (target.getAttribute('data-movable-handle')) {\n      return false;\n    }\n\n    if (DISABLED_ELEMENTS.includes(target.tagName.toLowerCase())) {\n      return true;\n    }\n\n    var role = target.getAttribute('role');\n\n    if (role && DISABLED_ROLES.includes(role.toLowerCase())) {\n      return true;\n    }\n\n    if (target.tagName.toLowerCase() === 'label' && target.hasAttribute('for')) {\n      return true;\n    }\n\n    if (target.tagName) target = target.parentElement;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}